// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}


model Billboard {
  id          String @id @default(cuid())
  label       String
  imageName    String?
  categories  Category[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([label])
}

model Category {
  id          String      @id @default(uuid())
  billboardId String      // Foreign Key to Billboard
  billboard   Billboard   @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[]   @relation("CategoryToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt


  @@index([billboardId])
}

model Product {
  id          String    @id @default(uuid())
  categoryId  String?    // Foreign Key to Category
  category    Category?  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String?
  price       Decimal?
  sizeId      String?    // Foreign Key to Size
  size        Size?      @relation(fields: [sizeId], references: [id])
  colorId     String?    // Foreign Key to Color
  color       Color?     @relation(fields: [colorId], references: [id])
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

// model Order {
//   id        String    @id @default(uuid())
//   orderItems OrderItem[] // Relation to OrderItem model
//   isPaid     Boolean   @default(false)
//   phone      String    @default("")
//   address    String    @default("")
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt


// }

// Intermediary for a many-to-many relationship
// model OrderItem {
//   id        String  @id @default(uuid())
//   orderId   String  // Foreign Key to Order
//   order     Order   @relation(fields: [orderId], references: [id])
//   productId String  // Foreign Key to Product
//   product   Product @relation(fields: [productId], references: [id])

//   @@index([orderId])
//   @@index([productId])
// }

model Size {
  id          String    @id @default(uuid())
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

}

model Color {
  id          String   @id @default(uuid())
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

}

  // model Image {
  //   id          String   @id @default(uuid())
  //   productId   String   // Foreign Key to Product
  //   product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  //   url         String   // URL of the image
  //   createdAt   DateTime @default(now())
  //   updatedAt   DateTime @updatedAt

  //   @@index([productId])
  // }
// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
